name: 'Plan Infra CI'

on:
    push:
        branches: [ main ]
    pull_request:
        branches:  [ main ]
        paths:
            - '.'

env:
    FORCE_COLOR: 3
    AWS_REGION: us-east-1
    TF_KEY: my-terraform-state.tfstate

jobs:

    check-terraform-format:
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - uses: actions/checkout@v2
            - uses: hashicorp/setup-terraform@v1
            - name: Terraform fmt
              run: terraform fmt -check

    infra-quality:
        runs-on: ubuntu-latest
        timeout-minutes: 10
        strategy:
            matrix:
                python-version: [3.7]
        steps:
            - uses: actions/checkout@v2
            - name: Set up Python 3.8
              uses: actions/setup-python@v1
              with:
                  python-version: 3.8

            - name: Test with Checkov
              id: checkov
              uses: bridgecrewio/checkov-action@master
              with:
                  framework: terraform
                  directory: .

    deploy:
        needs: [check-terraform-format, infra-quality]
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
          - name: Checkout Repo
            uses: actions/checkout@v2

          - name: Terraform Setup
            uses: hashicorp/setup-terraform@v1
            
          - name: Terraform Init
            run: terraform init
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              TF_ACTION_WORKING_DIR: '.'
              AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}



          - name: Terraform validate
            run: terraform validate

          - name: Terraform Apply
            run: terraform apply -auto-approve
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              TF_ACTION_WORKING_DIR: '.'
              AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
    destroy:
      name: "Destroy AWS"
      runs-on: ubuntu-latest
      steps:
          - name: AWS Plan Copy
            run: aws s3 cp s3://taaskwerod650ilbv889d88lk0912-${{ github.event.inputs.env }}.tfstate terraform.tfstate
            id: copy
            env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

          - name: Show Destroy plan
            run: terraform plan -destroy
            continue-on-error: true

          - name: Destroy resources jobs
            id: destroy
            run: terraform destroy -auto-approve

          - name: Delete plan file
            if: steps.destroy.outcome == 'success'
            run: aws s3 rm s3://taaskwerod650ilbv889d88lk0912-${{ github.event.inputs.env }}.tfstate
            env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        
          - name: Destroy resources jobs
            id: destroy
            run: terraform destroy -auto-approve
            continue-on-error: true
