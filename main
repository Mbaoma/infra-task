resource "tls_private_key" "infra_key" {
  algorithm = var.algorithm
}

resource "aws_key_pair" "infra-task-key" {
  key_name   = var.key_name
  public_key = tls_private_key.infra_key.public_key_openssh
}

resource "local_file" "private_key" {
  depends_on = [
    tls_private_key.infra_key,
  ]
  content  = tls_private_key.infra_key.private_key_pem
  filename = var.filename
}

data "aws_vpc" "default" {
  default = true
  cidr_block = "172.31.0.0/16"
}

# Internet Gateway for Public Subnet
resource "aws_internet_gateway" "ig" {
  vpc_id = data.aws_vpc.default.id
  tags = {
    Name        = "${var.environment}-igw"
    Environment = var.environment
  }
}

# Elastic-IP (eip) for NAT
resource "aws_eip" "nat_eip" {
  vpc        = true
  instance = aws_instance.instance.id
}

resource "aws_eip" "nat_eip2" {
  vpc        = true
  instance = aws_instance.instance.id
}

resource "aws_eip_association" "demo-eip-association" {
  instance_id   = aws_instance.instance.id
  allocation_id = aws_eip.nat_eip2.id
}

# NAT
resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = element(aws_subnet.public_subnet.*.id, 0)

  tags = {
    Name        = "nat"
    Environment = "${var.environment}"
  }
}

# Public subnet
resource "aws_subnet" "public_subnet" {
  vpc_id            = data.aws_vpc.default.id
  availability_zone = var.availability_zone1
  cidr_block = "172.31.16.0/20"
  tags = {
    "Name" = "public_subnet1"
  }
}


# Private Subnet
resource "aws_subnet" "private_subnet" {
  vpc_id                  = data.aws_vpc.default.id
  #count                   = length(var.private_subnets_cidr)
  cidr_block = "172.31.32.0/20"
  availability_zone       = var.availability_zone2
  map_public_ip_on_launch = false

  tags = {
    Name        = "${var.environment}-private-subnet"
    Environment = "${var.environment}"
  }
}


# Routing tables to route traffic for Private Subnet
resource "aws_route_table" "private" {
  vpc_id = data.aws_vpc.default.id

  tags = {
    Name        = "${var.environment}-private-route-table"
    Environment = "${var.environment}"
  }
}

# Routing tables to route traffic for Public Subnet
resource "aws_route_table" "public" {
  vpc_id = data.aws_vpc.default.id

  tags = {
    Name        = "${var.environment}-public-route-table"
    Environment = "${var.environment}"
  }
}

# Route for Internet Gateway
resource "aws_route" "public_internet_gateway" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = var.destination_cidr_block
  gateway_id             = aws_internet_gateway.ig.id
}

# Route for NAT
resource "aws_route" "private_nat_gateway" {
  route_table_id         = aws_route_table.private.id
  destination_cidr_block = var.destination_cidr_block
  nat_gateway_id         = aws_nat_gateway.nat.id
}

# Route table associations for both Public & Private Subnets
resource "aws_route_table_association" "public" {
  count          = length(var.public_subnet_cidr)
  subnet_id      = element(aws_subnet.public_subnet.*.id, count.index)
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "private" {
  count          = length(var.private_subnet_cidr)
  subnet_id      = element(aws_subnet.private_subnet.*.id, count.index)
  route_table_id = aws_route_table.private.id
}

# Default Security Group of VPC
resource "aws_security_group" "InfraTask_sg" {
  
  name        = "${var.environment}-sg"
  description = "Default SG to alllow traffic from the VPC"
  vpc_id      = "vpc-018f3d6ead2447e18"  #data.aws_vpc.default.id
  depends_on = [data.aws_vpc.default]  #data.aws_vpc.default
  

  ingress {
    description     = "SSH"
    from_port       = 22
    to_port         = 22
    protocol        = "tcp"
    cidr_blocks = [data.aws_vpc.default.cidr_block]
  }

  ingress {
    description     = "HTTPS in public subnet"
    from_port       = 443
    to_port         = 443
    protocol        = "tcp"
     cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description     = "HTTPS in public subnet"
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
     cidr_blocks = [data.aws_vpc.default.cidr_block]
  }

  egress {
    from_port   = 0
    description = "Egress"
    to_port     = 0
    protocol    = "-1"
    self        = "true"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Environment = "${var.environment}"
  }
}

resource "aws_lb" "my-lb" {
  #checkov:skip=CKV2_AWS_28:Public ALB
  #checkov:skip=CKV2_AWS_175:skip logging
  #checkov:skip=CKV2_AWS_176:skip logging
  name               = "test-lb-tf"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.InfraTask_sg.id]
  subnets            = [aws_subnet.public_subnet.id, aws_subnet.private_subnet.id, ]
  enable_deletion_protection = true
  drop_invalid_header_fields = true

  access_logs {
    bucket  = "testingci90pipeline5682wel98l"
    prefix  = "test-lb"
    enabled = true
  } 

  tags = {
    Environment = "production"
  }
}

resource "aws_network_interface" "ni" {
  subnet_id       = aws_subnet.public_subnet.id
  private_ips     = ["10.0.0.50"]
  security_groups = [aws_security_group.InfraTask_sg.id]
  #cidr_blocks = ["0.0.0.0/0"]

  attachment {
    instance     = aws_instance.instance.id
    device_index = 1
  }
}

# EC2 instance
resource "aws_instance" "instance" {
  ami           = var.ami
  #checkov:skip=CKV2_AWS_41:skip logging
  instance_type = var.instance_type
  subnet_id     = aws_subnet.public_subnet.id
  #count                  = length(var.public_subnets_cidr)
  #subnet_id              = element(aws_subnet.public_subnet.*.id, count.index)
  vpc_security_group_ids = [aws_security_group.InfraTask_sg.id]
  key_name               = var.key_name
  #user_data              = "${file("./userdata/script.sh")}"
  ebs_optimized        = true
  monitoring           = true

  root_block_device {
    encrypted     = true
 }

  credit_specification {
    cpu_credits = "standard"
  }

  metadata_options {
    http_endpoint = "enabled"
    http_tokens   = "required"
  }
  tags = {
    Name = "instance1"
  }
}

resource "aws_cloudwatch_metric_alarm" "monitorTaskEC2" {
  alarm_name                = "terraform-test-monitorTaskEC25"
  comparison_operator       = "GreaterThanOrEqualToThreshold"
  evaluation_periods        = "2"
  metric_name               = "CPUUtilization"
  namespace                 = "AWS/EC2"
  period                    = "120"
  statistic                 = "Average"
  threshold                 = "80"
  alarm_description         = "This metric monitors ec2 cpu utilization"
  insufficient_data_actions = []
  dimensions = {
    LoadBalancer = aws_lb.my-lb.arn_suffix
  }
}